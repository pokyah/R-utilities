rmarkdown::render("R-snippets.R")
n
# Get the Wallonia adminisrative boundary - default EPSG is 4326
wallonia.4326.sf <- dplyr::filter(st_as_sf(getData('GADM', country="BE", level=1)), NAME_1=="Wallonie")
library(sf)
library(dplyr)
library(rgdal)
# Get the Wallonia adminisrative boundary - default EPSG is 4326
wallonia.4326.sf <- dplyr::filter(st_as_sf(getData('GADM', country="BE", level=1)), NAME_1=="Wallonie")
library(raster)
# Get the Wallonia adminisrative boundary - default EPSG is 4326
wallonia.4326.sf <- dplyr::filter(st_as_sf(getData('GADM', country="BE", level=1)), NAME_1=="Wallonie")
# convert from geographic lat/lon to projected in meters
wallonia.3812.sf <- sf::st_transform(wallonia.4326.sf, 3812) # projected EPSG for Belgian Lambert 2008
# make the grid and clip it with the Wallonia boundaries
# st_intersection(st_make_grid(wallonia.sf, n=c(100,100), what="centers"), dataset.sf)
grid.sf <- st_make_grid(wallonia.3812.sf, n=c(1000,1000), what="centers")
mapview(grid.sf)
mapview::mapview(grid.sf)
summary(grid.sf)
# make the grid and clip it with the Wallonia boundaries
# st_intersection(st_make_grid(wallonia.sf, n=c(100,100), what="centers"), dataset.sf)
grid.sf <- st_make_grid(wallonia.3812.sf, what="centers")
mapview::mapview(grid.sf)
# Clip the grid with the administrative boundary of Wallonia
grid.sf <- st_intersection(grid.sf, wallonia.3812.sf)
mapview::mapview(grid.sf)
st_bbox(wallonia.sf)[c(1, 3)] * st_bbox(x)[c(2, 4)]
air <- st_bbox(wallonia.3812.sf)[c(1, 3)] * st_bbox(wallonia.3812.sf)[c(2, 4)]
air
air <- (st_bbox(wallonia.3812.sf)[c(1, 3)]) * (st_bbox(wallonia.3812.sf)[c(2, 4)])
air
st_bbox(wallonia.3812.sf)[c(1, 3)])
st_bbox(wallonia.3812.sf)[c(1, 3)]
# make the grid and clip it with the Wallonia boundaries
# st_intersection(st_make_grid(wallonia.sf, n=c(100,100), what="centers"), dataset.sf)
grid.sf <- st_make_grid(wallonia.3812.sf, cellsize = 1000, what="centers")
mapview::mapview(grid.sf)
# Clip the grid with the administrative boundary of Wallonia
grid.sf <- st_intersection(grid.sf, wallonia.3812.sf)
build_wal_grid.fun <- function(resolution.num, dir.path.chr) {
library(sf)
library(dplyr)
library(raster)
# Get the Wallonia adminisrative boundary - default EPSG is 4326
wallonia.4326.sf <- dplyr::filter(st_as_sf(getData('GADM', country="BE", level=1)), NAME_1=="Wallonie")
# convert from geographic lat/lon to projected in meters
wallonia.3812.sf <- sf::st_transform(wallonia.4326.sf, 3812) # projected EPSG for Belgian Lambert 2008
# make the grid and clip it with the Wallonia boundaries
# st_intersection(st_make_grid(wallonia.sf, n=c(100,100), what="centers"), dataset.sf)
grid.sf <- st_make_grid(wallonia.3812.sf, cellsize = resolution.num, what="centers")
# Clip the grid with the administrative boundary of Wallonia
grid.sf <- st_intersection(grid.sf, wallonia.3812.sf)
# Write as .shp object
st_write(
grid.sf,
paste0(
dir.path.chr,
"wallonia_",
res.num/1000,
"km2_grid",
".shp"
)
)
}
build_wal_grid.fun(1000, ~/Documents/code/pokyah/R-utilities/ )
build_wal_grid.fun(1000, "~/Documents/code/pokyah/R-utilities/" )
build_wal_grid.fun <- function(res.num, dir.path.chr) {
library(sf)
library(dplyr)
library(raster)
# Get the Wallonia adminisrative boundary - default EPSG is 4326
wallonia.4326.sf <- dplyr::filter(st_as_sf(getData('GADM', country="BE", level=1)), NAME_1=="Wallonie", path=dir.path.chr)
# convert from geographic lat/lon to projected in meters
wallonia.3812.sf <- sf::st_transform(wallonia.4326.sf, 3812) # projected EPSG for Belgian Lambert 2008
# make the grid and clip it with the Wallonia boundaries
# st_intersection(st_make_grid(wallonia.sf, n=c(100,100), what="centers"), dataset.sf)
grid.sf <- st_make_grid(wallonia.3812.sf, cellsize = resolution.num, what="centers")
# Clip the grid with the administrative boundary of Wallonia
grid.sf <- st_intersection(grid.sf, wallonia.3812.sf)
# Write as .shp object in the dir mentioned in arguments
st_write(
grid.sf,
paste0(
dir.path.chr,
"/wallonia_",
res.num/1000,
"km2_grid",
".shp"
)
)
}
build_wal_grid.fun(1000, "~/Documents/code/pokyah/R-utilities" )
build_wal_grid.fun(1000, "~/Documents/code/pokyah/R-utilities" )
build_wal_grid.fun <- function(res.num, dir.path.chr) {
library(sf)
library(dplyr)
library(raster)
# Get the Wallonia adminisrative boundary - default EPSG is 4326
wallonia.4326.sf <- dplyr::filter(st_as_sf(getData('GADM', country="BE", level=1)), NAME_1=="Wallonie", path == dir.path.chr)
# convert from geographic lat/lon to projected in meters
wallonia.3812.sf <- sf::st_transform(wallonia.4326.sf, 3812) # projected EPSG for Belgian Lambert 2008
# make the grid and clip it with the Wallonia boundaries
# st_intersection(st_make_grid(wallonia.sf, n=c(100,100), what="centers"), dataset.sf)
grid.sf <- st_make_grid(wallonia.3812.sf, cellsize = resolution.num, what="centers")
# Clip the grid with the administrative boundary of Wallonia
grid.sf <- st_intersection(grid.sf, wallonia.3812.sf)
# Write as .shp object in the dir mentioned in arguments
st_write(
grid.sf,
paste0(
dir.path.chr,
"/wallonia_",
res.num/1000,
"km2_grid",
".shp"
)
)
}
build_wal_grid.fun(1000, "~/Documents/code/pokyah/R-utilities" )
build_wal_grid.fun <- function(res.num, dir.path.chr) {
library(sf)
library(dplyr)
library(raster)
# Get the Wallonia adminisrative boundary - default EPSG is 4326
wallonia.4326.sf <- dplyr::filter(st_as_sf(getData('GADM', country="BE", level=1, path=dir.path.chr)), NAME_1=="Wallonie")
# convert from geographic lat/lon to projected in meters
wallonia.3812.sf <- sf::st_transform(wallonia.4326.sf, 3812) # projected EPSG for Belgian Lambert 2008
# make the grid and clip it with the Wallonia boundaries
# st_intersection(st_make_grid(wallonia.sf, n=c(100,100), what="centers"), dataset.sf)
grid.sf <- st_make_grid(wallonia.3812.sf, cellsize = resolution.num, what="centers")
# Clip the grid with the administrative boundary of Wallonia
grid.sf <- st_intersection(grid.sf, wallonia.3812.sf)
# Write as .shp object in the dir mentioned in arguments
st_write(
grid.sf,
paste0(
dir.path.chr,
"/wallonia_",
res.num/1000,
"km2_grid",
".shp"
)
)
}
build_wal_grid.fun(1000, "~/Documents/code/pokyah/R-utilities" )
build_wal_grid.fun <- function(res.num, dir.path.chr) {
library(sf)
library(dplyr)
library(raster)
# Get the Wallonia adminisrative boundary - default EPSG is 4326
wallonia.4326.sf <- dplyr::filter(st_as_sf(getData('GADM', country="BE", level=1, path=dir.path.chr)), NAME_1=="Wallonie")
# convert from geographic lat/lon to projected in meters
wallonia.3812.sf <- sf::st_transform(wallonia.4326.sf, 3812) # projected EPSG for Belgian Lambert 2008
# make the grid and clip it with the Wallonia boundaries
# st_intersection(st_make_grid(wallonia.sf, n=c(100,100), what="centers"), dataset.sf)
grid.sf <- st_make_grid(wallonia.3812.sf, cellsize = res.num, what="centers")
# Clip the grid with the administrative boundary of Wallonia
grid.sf <- st_intersection(grid.sf, wallonia.3812.sf)
# Write as .shp object in the dir mentioned in arguments
st_write(
grid.sf,
paste0(
dir.path.chr,
"/wallonia_",
res.num/1000,
"km2_grid",
".shp"
)
)
}
build_wal_grid.fun(1000, "~/Documents/code/pokyah/R-utilities" )
build_wal_grid.fun <- function(res.num, dir.path.chr) {
library(sf)
library(dplyr)
library(raster)
# Get the Wallonia adminisrative boundary - default EPSG is 4326
wallonia.4326.sf <- dplyr::filter(st_as_sf(getData('GADM', country="BE", level=1, path=dir.path.chr)), NAME_1=="Wallonie")
# convert from geographic lat/lon to projected in meters
wallonia.3812.sf <- sf::st_transform(wallonia.4326.sf, 3812) # projected EPSG for Belgian Lambert 2008
# make the grid and clip it with the Wallonia boundaries
# st_intersection(st_make_grid(wallonia.sf, n=c(100,100), what="centers"), dataset.sf)
grid.sf <- st_make_grid(wallonia.3812.sf, cellsize = res.num, what="centers")
# Clip the grid with the administrative boundary of Wallonia
grid.sf <- st_intersection(grid.sf, wallonia.3812.sf)
# Return the clipped grid
return(grid.sf)
}
build_wal_grid.fun(1000, "~/Documents/code/pokyah/R-utilities" )
build_wal_grid.fun <- function(res.num, dir.path.chr) {
library(sf)
library(dplyr)
library(raster)
# Get the Wallonia adminisrative boundary - default EPSG is 4326
wallonia.4326.sf <- dplyr::filter(st_as_sf(getData('GADM', country="BE", level=1, path=dir.path.chr)), NAME_1=="Wallonie")
# convert from geographic lat/lon to projected in meters
wallonia.3812.sf <- sf::st_transform(wallonia.4326.sf, 3812) # projected EPSG for Belgian Lambert 2008
# make the grid and clip it with the Wallonia boundaries
# st_intersection(st_make_grid(wallonia.sf, n=c(100,100), what="centers"), dataset.sf)
grid.sf <- st_make_grid(wallonia.3812.sf, cellsize = res.num*1000, what="centers")
# Clip the grid with the administrative boundary of Wallonia
grid.sf <- st_intersection(grid.sf, wallonia.3812.sf)
# Return the clipped grid
return(grid.sf)
}
grid<- build_wal_grid.fun(10, "~/Documents/code/pokyah/R-utilities" )
mapview(grid)
mapview::mapview(grid)
build_wal_grid.fun <- function(res.num, geom.chr) {
library(sf)
library(dplyr)
library(raster)
# Get the Wallonia adminisrative boundary - default EPSG is 4326
wallonia.4326.sf <- dplyr::filter(st_as_sf(getData('GADM', country="BE", level=1, path=dir.path.chr)), NAME_1=="Wallonie")
# convert from geographic lat/lon to projected in meters
wallonia.3812.sf <- sf::st_transform(wallonia.4326.sf, 3812) # projected EPSG for Belgian Lambert 2008
# make the grid and clip it with the Wallonia boundaries
# st_intersection(st_make_grid(wallonia.sf, n=c(100,100), what="centers"), dataset.sf)
grid.sf <- st_make_grid(wallonia.3812.sf, cellsize = res.num*1000, what=geom.chr)
# Clip the grid with the administrative boundary of Wallonia
grid.sf <- st_intersection(grid.sf, wallonia.3812.sf)
# Return the clipped grid
return(grid.sf)
}
grid<- build_wal_grid.fun(10, "polygons" )
build_wal_grid.fun <- function(res.num, geom.chr) {
library(sf)
library(dplyr)
library(raster)
# Get the Wallonia adminisrative boundary - default EPSG is 4326
wallonia.4326.sf <- dplyr::filter(st_as_sf(getData('GADM', country="BE", level=1)), NAME_1=="Wallonie")
# convert from geographic lat/lon to projected in meters
wallonia.3812.sf <- sf::st_transform(wallonia.4326.sf, 3812) # projected EPSG for Belgian Lambert 2008
# make the grid and clip it with the Wallonia boundaries
# st_intersection(st_make_grid(wallonia.sf, n=c(100,100), what="centers"), dataset.sf)
grid.sf <- st_make_grid(wallonia.3812.sf, cellsize = res.num*1000, what=geom.chr)
# Clip the grid with the administrative boundary of Wallonia
grid.sf <- st_intersection(grid.sf, wallonia.3812.sf)
# Return the clipped grid
return(grid.sf)
}
grid<- build_wal_grid.fun(10, "polygons" )
mapview::mapview(grid)
grid<- build_wal_grid.fun(25, "centers" )
mapview::mapview(grid)
mapview::mapview(build_wal_grid.fun(15, "polygons" ))
mapview::mapview(build_wal_grid.fun(5, "centers" ))
mapview::mapview(build_wal_grid.fun(20, "corners" ))
render("R-utilities.R")
rmarkdown::render("R-utilities.R")
build_topo_rasters.fun <- function() {
# Get the Wallonia DEM
bel.ele.ras = raster::getData("alt", country = "BE", mask = TRUE)
# but what are the units ? h
# it seems that the data are not projected but are in longlat so we need to project it to get the units
bel.ele.ras <- projectRaster(bel_ele.ras, crs = toString((filter(crs_data.df, code=="3812"))$prj4))
# compute the slope from the elevation
bel.slope.ras <- terrain(bel.ele.ras, opt="slope", unit="degrees")
# compute the aspect from the elevation
bel.aspect.ras <- terrain(bel_ele.ras, opt="aspect", unit="degrees")
# create the stack of rasters
topo.stack.ras <- stack(bel.ele.ras, bel.slope.ras, bel.aspect.ras)
# Return the stack of rasters
return(topo.stack.ras)
}
topo <- build_topo_rasters.fun()
build_topo_rasters.fun <- function() {
# Loading the required library
library(raster)
# Get the Wallonia DEM
bel.ele.ras = getData("alt", country = "BE", mask = TRUE)
# but what are the units ? h
# it seems that the data are not projected but are in longlat so we need to project it to get the units
bel.ele.ras <- projectRaster(bel_ele.ras, crs = toString((filter(crs_data.df, code=="3812"))$prj4))
# compute the slope from the elevation
bel.slope.ras <- terrain(bel.ele.ras, opt="slope", unit="degrees")
# compute the aspect from the elevation
bel.aspect.ras <- terrain(bel_ele.ras, opt="aspect", unit="degrees")
# create the stack of rasters
topo.stack.ras <- stack(bel.ele.ras, bel.slope.ras, bel.aspect.ras)
# Return the stack of rasters
return(topo.stack.ras)
}
topo <- build_topo_rasters.fun()
build_topo_rasters.fun <- function() {
# Loading the required library
library(raster)
# Get the Wallonia DEM
bel.ele.ras = getData("alt", country = "BE", mask = TRUE)
# but what are the units ? h
# it seems that the data are not projected but are in longlat so we need to project it to get the units
bel.ele.ras <- projectRaster(bel_ele.ras, crs = toString((filter(crs_data.df, code=="3812"))$prj4))
# compute the slope from the elevation
bel.slope.ras <- terrain(bel.ele.ras, opt="slope", unit="degrees")
# compute the aspect from the elevation
bel.aspect.ras <- terrain(bel.ele.ras, opt="aspect", unit="degrees")
# create the stack of rasters
topo.stack.ras <- stack(bel.ele.ras, bel.slope.ras, bel.aspect.ras)
# Return the stack of rasters
return(topo.stack.ras)
}
topo <- build_topo_rasters.fun()
build_topo_rasters.fun <- function() {
# Loading the required library
library(raster)
# Get the Wallonia DEM
bel.ele.ras = getData("alt", country = "BE", mask = TRUE)
# but what are the units ? h
# it seems that the data are not projected but are in longlat so we need to project it to get the units
bel.ele.ras <- projectRaster(bel.ele.ras, crs = toString((filter(crs_data.df, code=="3812"))$prj4))
# compute the slope from the elevation
bel.slope.ras <- terrain(bel.ele.ras, opt="slope", unit="degrees")
# compute the aspect from the elevation
bel.aspect.ras <- terrain(bel.ele.ras, opt="aspect", unit="degrees")
# create the stack of rasters
topo.stack.ras <- stack(bel.ele.ras, bel.slope.ras, bel.aspect.ras)
# Return the stack of rasters
return(topo.stack.ras)
}
topo <- build_topo_rasters.fun()
build_topo_rasters.fun <- function() {
# Loading the required library
library(raster)
library(rgdal)
# Get the Wallonia DEM
bel.ele.ras = getData("alt", country = "BE", mask = TRUE)
# but what are the units ? h
# it seems that the data are not projected but are in longlat so we need to project it to get the units
bel.ele.ras <- projectRaster(bel.ele.ras, crs = toString((filter(rgdal::make_EPSG(), code=="3812"))$prj4))
# compute the slope from the elevation
bel.slope.ras <- terrain(bel.ele.ras, opt="slope", unit="degrees")
# compute the aspect from the elevation
bel.aspect.ras <- terrain(bel.ele.ras, opt="aspect", unit="degrees")
# create the stack of rasters
topo.stack.ras <- stack(bel.ele.ras, bel.slope.ras, bel.aspect.ras)
# Return the stack of rasters
return(topo.stack.ras)
}
topo <- build_topo_rasters.fun()
(filter(rgdal::make_EPSG(), code=="3812")
)
d <- rgdal::make_EPSG()
colnames(d)
build_topo_rasters.fun <- function() {
# Loading the required library
library(raster)
library(rgdal)
library(dplyr)
# Get the Wallonia DEM
bel.ele.ras = getData("alt", country = "BE", mask = TRUE)
# but what are the units ? h
# it seems that the data are not projected but are in longlat so we need to project it to get the units
bel.ele.ras <- projectRaster(bel.ele.ras, crs = toString((dplyr::filter(rgdal::make_EPSG(), code=="3812"))$prj4))
# compute the slope from the elevation
bel.slope.ras <- terrain(bel.ele.ras, opt="slope", unit="degrees")
# compute the aspect from the elevation
bel.aspect.ras <- terrain(bel.ele.ras, opt="aspect", unit="degrees")
# create the stack of rasters
topo.stack.ras <- stack(bel.ele.ras, bel.slope.ras, bel.aspect.ras)
# Return the stack of rasters
return(topo.stack.ras)
}
topo <- build_topo_rasters.fun()
head(topo)
mapview(topo)
class(topo)
summary(topo)
summary(topo$BEL_msk_alt)
class(topo$BEL_msk_alt)
rmarkdown::render("R-utilities.R")
